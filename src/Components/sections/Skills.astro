---
import { Icon } from "astro-icon/components";

import Section from "@/layouts/Section.astro";

interface Props {
  t: {
    skills_section: {
      title: string;
      frontend_title: string;
      backend_title: string;
      frontend: { name: string; icon: string }[];
      backend: { name: string; icon: string }[];
    };
  };
}

const { t } = Astro.props;
const { title, frontend_title, backend_title, frontend, backend } =
  t.skills_section;
---

<Section {title} id="skills">
  <Icon
    name="lucide:layers"
    slot="icon"
    class="size-8 md:size-10 -translate-y-1 text-accent"
  />

  <div class="w-full max-w-5xl mx-auto flex flex-col gap-12">
    <div class="frontend-section">
      <h3 class="text-2xl font-semibold text-center mb-6">{frontend_title}</h3>
      <div
        class="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 gap-6"
      >
        {
          frontend.map((skill) => (
            <div class="skill-item opacity-0 flex flex-col items-center justify-center gap-2 p-4 bg-brand-dark/50 rounded-lg transition-transform hover:-translate-y-1">
              <Icon name={skill.icon} class="size-12" />
              <span class="text-sm text-center text-brand-light/80">
                {skill.name}
              </span>
            </div>
          ))
        }
      </div>
    </div>

    <div class="backend-section">
      <h3 class="text-2xl font-semibold text-center mb-6">{backend_title}</h3>
      <div
        class="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 gap-6"
      >
        {
          backend.map((skill) => (
            <div class="skill-item opacity-0 flex flex-col items-center justify-center gap-2 p-4 bg-brand-dark/50 rounded-lg transition-transform hover:-translate-y-1">
              <Icon name={skill.icon} class="size-12" />
              <span class="text-sm text-center text-brand-light/80">
                {skill.name}
              </span>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</Section>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener("astro:page-load", () => {
    gsap.context(() => {
      const allSkillItems = gsap.utils.toArray<HTMLElement>(".skill-item");

      allSkillItems.forEach((item, index) => {
        gsap.from(item, {
          opacity: 0,
          scale: 0.8,
          y: 50,
          duration: 0.5,
          ease: "power2.out",
          scrollTrigger: {
            trigger: item,
            start: "top 90%",
            toggleActions: "play none none none",
          },
        });
        gsap.to(item, {
          opacity: 1,
          scale: 1,
          y: 0,
          duration: 0.5,
          ease: "power2.out",
          scrollTrigger: {
            trigger: item,
            start: "top 90%",
            toggleActions: "play none none none",
          },
          delay: (index % 6) * 0.1,
        });
      }
    
    );
    }, "#skills");
  });
</script>
