---
import { Icon } from "astro-icon/components";
import Section from "@/layouts/Section.astro";

interface Props {
  t: {
    technologies: Record<string, { name: string; icon: string }>;
    skills_section: {
      title: string;
      frontend_title: string;
      backend_title: string;
      bdd_title: string;
      frontend_keys: string[];
      backend_keys: string[];
      database_keys: string[];
    };
  };
}

const { t } = Astro.props;
const {
  title,
  frontend_title,
  backend_title,
  bdd_title,
  frontend_keys,
  backend_keys,
  database_keys,
} = t.skills_section;
const techDictionary = t.technologies;
---

<Section {title} id="skills">
  <Icon
    name="lucide:layers"
    slot="icon"
    class="size-8 md:size-10 -translate-y-1 text-accent"
  />

  <div class="w-full max-w-5xl mx-auto flex flex-col gap-12">
    <div class="frontend-section">
      <h3 class="text-2xl font-semibold text-center mb-6">{frontend_title}</h3>
      <div
        class="grid grid-cols-2 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-7 gap-6"
      >
        {
          frontend_keys.map((key) => {
            const skill = techDictionary[key];
            if (!skill) return null;

            return (
              <div class="skill-item opacity-0 flex flex-col items-center justify-center gap-2 px-4 py-6 bg-brand-dark/50 rounded-lg transition-transform hover:-translate-y-1">
                <Icon
                  name={skill.icon}
                  class:list={[
                    "size-10",
                    { "contrast-50": skill.icon == "logos:astro-icon" },
                  ]}
                />
                <span class="mt-2 text-md text-center text-brand-light/80">
                  {skill.name}
                </span>
              </div>
            );
          })
        }
      </div>
    </div>

    <div class="backend-section">
      <h3 class="text-2xl font-semibold text-center mb-6">{backend_title}</h3>
      <div
        class="grid grid-cols-2 md:grid-cols-3 sm:grid-cols-5 md:grid-cols-6 lg:grid-cols-7 gap-6"
      >
        {
          backend_keys.map((key) => {
            const skill = techDictionary[key];
            if (!skill) return null;

            return (
              <div class="skill-item opacity-0 flex flex-col items-center justify-center gap-2 px-4 py-6 bg-brand-dark/50 rounded-lg transition-transform hover:-translate-y-1">
                <Icon
                  name={skill.icon}
                  class:list={[
                    "size-10",
                    { "contrast-50": skill.icon == "logos:astro-icon" },
                  ]}
                />
                <span class="mt-2 text-md text-center text-brand-light/80">
                  {skill.name}
                </span>
              </div>
            );
          })
        }
      </div>
    </div>

    <div class="backend-section">
      <h3 class="text-2xl font-semibold text-center mb-6">{bdd_title}</h3>
      <div
        class="grid grid-cols-2 md:grid-cols-3 sm:grid-cols-5 md:grid-cols-6 lg:grid-cols-7 gap-6"
      >
        {
          database_keys.map((key) => {
            const skill = techDictionary[key];
            if (!skill) return null;

            return (
              <div class="skill-item opacity-0 flex flex-col items-center justify-center gap-2 px-4 py-6 bg-brand-dark/50 rounded-lg transition-transform hover:-translate-y-1">
                <Icon
                  name={skill.icon}
                  class:list={[
                    "size-10",
                    { "contrast-50": skill.icon == "logos:astro-icon" },
                  ]}
                />
                <span class="mt-2 text-md text-center text-brand-light/80">
                  {skill.name}
                </span>
              </div>
            );
          })
        }
      </div>
    </div>
  </div>
</Section>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener("astro:page-load", () => {
    gsap.context(() => {
      const allSkillItems = gsap.utils.toArray<HTMLElement>(".skill-item");

      console.log(allSkillItems);

      allSkillItems.forEach((item, index) => {
        gsap.to(item, {
          opacity: 1,
          scale: 1,
          y: 0,

          duration: 0.5,
          ease: "power2.out",

          delay: (index % 6) * 0.3,

          scrollTrigger: {
            trigger: item,
            start: "top 90%",
            toggleActions: "play none none none",
          },
        });
      });
    }, "#skills");
  });
</script>
