---
import { Icon } from "astro-icon/components";

interface Props {
  t: Record<string, any>;
  lang: "es" | "en";
}

const { t, lang } = Astro.props;

const navItems = [
  {
    label: t.nav.projects,
    url: `/${lang}/#projects`,
  },
  {
    label: t.nav.experience,
    url: `/${lang}/#experience`,
  },
  {
    label: t.nav.about,
    url: `/${lang}/about`,
  },
];

const homeUrl = `/${lang}/`;

function getOppositeLangUrl(currentUrl: URL, currentLang: "es" | "en"): string {
  const otherLang = currentLang === "es" ? "en" : "es";
  const pathSegments = currentUrl.pathname
    .split("/")
    .filter((segment) => segment);

  if (
    pathSegments.length > 0 &&
    (pathSegments[0] === "es" || pathSegments[0] === "en")
  ) {
    pathSegments.shift();
  }

  const newPath = `/${otherLang}/${pathSegments.join("/")}`;

  return newPath;
}

const currentUrl = Astro.url;
const otherLangUrl = getOppositeLangUrl(currentUrl, lang);
---

<header
  id="main-header"
  class="fixed top-0 left-0 w-full z-50 transition-colors duration-300"
>
  <div
    class="container mx-auto px-4 sm:px-6 lg:px-8 flex justify-between items-center h-20"
  >
    <a
      href={homeUrl}
      class="text-xl font-bold text-accent-darker hover:text-accent transition-all"
    >
      EMZ
    </a>

    <nav class="hidden md:flex items-center space-x-6">
      <ul class="flex space-x-6">
        {
          navItems.map((item) => (
            <li>
              <a href={item.url} class="hover:text-accent transition-colors">
                {item.label}
              </a>
            </li>
          ))
        }
      </ul>
      <a href={otherLangUrl} title="Change language">
        <Icon
          name="material-symbols:g-translate"
          class="size-6 md:size-8 hover:text-accent transition-colors"
        />
      </a>
    </nav>

    <button
      id="mobile-menu-button"
      class="md:hidden p-2 rounded-md hover:bg-white/10 transition-colors"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
      <span class="sr-only">Abrir men√∫</span>
    </button>
  </div>

  <div
    id="mobile-menu"
    class="hidden md:hidden bg-brand-darker/90 backdrop-blur-sm"
  >
    <nav class="container mx-auto px-4 sm:px-6 lg:px-8 py-4">
      <ul class="flex flex-col items-center space-y-4">
        {
          navItems.map((item) => (
            <li>
              <a
                href={item.url}
                class="text-lg hover:text-accent transition-colors mobile-nav-link"
              >
                {item.label}
              </a>
            </li>
          ))
        }
        <li class="pt-4">
          <a href={otherLangUrl} class="px-4 py-2 ...">
            {t.language_selector.other_lang_name}
          </a>
        </li>
      </ul>
    </nav>
  </div>
</header>

<script>
  const menuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");
  const navLinks = document.querySelectorAll(".mobile-nav-link");

  menuButton?.addEventListener("click", () => {
    mobileMenu?.classList.toggle("hidden");
  });

  navLinks.forEach((link) => {
    link.addEventListener("click", () => {
      mobileMenu?.classList.add("hidden");
    });
  });

  const header = document.getElementById("main-header");
  window.addEventListener("scroll", () => {
    if (window.scrollY > 50) {
      header?.classList.add(
        "bg-brand-darker/90",
        "backdrop-blur-sm",
        "shadow-lg"
      );
    } else {
      header?.classList.remove(
        "bg-brand-darker/90",
        "backdrop-blur-sm",
        "shadow-lg"
      );
    }
  });
</script>
